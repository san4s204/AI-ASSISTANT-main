# bot/routers/reply_shortcuts.py
from __future__ import annotations
import asyncio
from aiogram import Router, types, F

from keyboards import (
    keyboard_sub,
    keyboard_setting_bot,
    keyboard_prompt_controls,
    keyboard_attach_source,
)
from bot.services.db import (
    update_user_state,
    get_user_token_and_doc,
    get_user_doc_id,
)
from openrouter import run_bot, stop_bot
from deepseek import doc

router = Router(name="reply_shortcuts")

# 1) –í–∫–ª/–≤—ã–∫–ª ¬´–ª–∏—á–Ω–æ–≥–æ¬ª –±–æ—Ç–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º state_bot)
@router.message(F.text.in_(["ü§ñ‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω", "ü§ñ‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω"]))
async def toggle_personal_bot(message: types.Message):
    label = (message.text or "").strip()

    if "–≤—ã–∫–ª—é—á–µ–Ω" in label:
        await message.answer("–ó–∞–ø—É—Å–∫–∞—é –í–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚úÖ")
        await asyncio.sleep(0.5)
        await update_user_state(message.from_user.id, "active")
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard_sub(message.from_user.id))

        token, word_file = await get_user_token_and_doc(message.from_user.id)
        if token:
            try:
                await run_bot(token, word_file, message.from_user.id)
            except Exception:
                # –Ω–µ –≤–∞–ª–∏–º—Å—è —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                pass
    else:
        await message.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –í–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚ùå")
        await update_user_state(message.from_user.id, "stop")
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard_sub(message.from_user.id))

        token, _ = await get_user_token_and_doc(message.from_user.id)
        if token:
            try:
                await stop_bot(str(token))
            except Exception:
                pass


# 2) –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (inline-–º–µ–Ω—é)
@router.message(F.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–æ—Ç–∞")
async def open_settings(message: types.Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:", reply_markup=keyboard_setting_bot())


# 3) –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ (Docs/Sheets)
@router.message(F.text == "üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
async def view_prompt_source(message: types.Message):
    link = await get_user_doc_id(message.from_user.id)
    if not link:
        await message.answer(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¢–∞–±–ª–∏—Ü—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            reply_markup=keyboard_attach_source(),
        )
        return

    try:
        ans = await doc(link, owner_user_id=message.from_user.id)  # {'id','title','content','kind'}
        kind = ans.get("kind")

        if kind == "sheet":
            url = f"https://docs.google.com/spreadsheets/d/{ans['id']}/edit"
            src_name = "Google Sheets"
        else:
            url = f"https://docs.google.com/document/d/{ans['id']}/edit"
            src_name = "Google Docs"

        await message.answer(
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {src_name}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ans.get('title','')}\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–µ–≤—å—é):\n{ans.get('content','')}",
            reply_markup=keyboard_prompt_controls(url),
        )
    except Exception:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø—ã (OAuth/—à–∞—Ä–∏–Ω–≥), –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ API –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏/ID."
        )
