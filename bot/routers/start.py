from __future__ import annotations
from aiogram import Router, types
from aiogram import F
from aiogram.filters import Command, CommandStart

from bot.services.db import get_subscription_until

from keyboards import (
    r_keyboard_sub, r_keyboard_unsub,
    keyboard_sub, keyboard_unsub, keyboard_return,
)


router = Router(name="start")

@router.message(CommandStart())
async def start_cmd(message: types.Message):
    res = await get_subscription_until(message.from_user.id)
    if res:
        await message.answer(
            f"–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! –û–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {res}",
            reply_markup=r_keyboard_sub()
        )
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard_sub(message.from_user.id))
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–µ–±–µ: \n "
            "–Ø –±–æ—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É –∏ Crypto Bot! "
            "–∏ –ø–æ–º–æ–≥–∞—é—â–∏–π –ª—é–¥—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ",
            reply_markup=r_keyboard_unsub()
        )
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard_unsub())

@router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "–£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7, –Ω–∞–ø–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @______",
        reply_markup=keyboard_return()
    )

@router.message(Command("info"))
async def info_cmd(message: types.Message):
    await message.answer(
        "–Ø –±–æ—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É –∏ Crypto Bot! "
        "–∏ –ø–æ–º–æ–≥–∞—é—â–∏–π –ª—é–¥—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ",
        reply_markup=keyboard_return()
    )

@router.message(F.text == "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_reply(message: types.Message):
    await message.answer(
        "–Ø –±–æ—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É –∏ —á–µ—Ä–µ–∑ Crypto Bot",
        reply_markup=keyboard_return()
    )

@router.message(F.text == "üí¨ –ü–æ–º–æ—â—å")
async def help_reply(message: types.Message):
    await message.answer(
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É",
        reply_markup=keyboard_return()
    )

## Callbacks

@router.callback_query(F.data == "info")
async def cq_info(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–Ø –±–æ—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É –∏ Crypto Bot! "
        "–∏ –ø–æ–º–æ–≥–∞—é—â–∏–π –ª—é–¥—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ",
        reply_markup=keyboard_return()
    )

@router.callback_query(F.data == "help")
async def cq_help(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7, –Ω–∞–ø–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @______",
        reply_markup=keyboard_return()
    )

@router.callback_query(F.data == "return")
async def cq_return(callback: types.CallbackQuery):
    # –†–∞–Ω—å—à–µ –∑–¥–µ—Å—å —Å—Ç–∞–≤–∏–ª–∏ global attempts=500, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å ‚Äî —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ.
    res = await get_subscription_until(callback.from_user.id)
    if res:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard_sub(callback.from_user.id))
    else:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard_unsub())