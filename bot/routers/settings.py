from __future__ import annotations
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.filters import Command
import asyncio
from bot.states import Form
from keyboards import keyboard_setting_bot, keyboard_sub, state_bot, keyboard_return, keyboard_prompt_controls, keyboard_confirm_delete_source, keyboard_attach_source, keyboard_calendar_menu, keyboard_unsub
from bot.services.db import update_user_state, get_user_token_and_doc, get_user_doc_id, update_user_token, update_user_document, set_user_calendar_id, get_user_calendar_id, clear_user_calendar_id, get_subscription_until
from openrouter import run_bot, stop_bot
from providers.redis_provider import delete_by_pattern
from deepseek import doc
from providers.google_calendar_oauth_provider import list_calendars_oauth
import re
from config import BASE_URL
from bot.services.google_oauth import delete_refresh_token, has_google_oauth
from aiogram.types import  InlineKeyboardButton
from aiogram.utils.keyboard import  InlineKeyboardBuilder

_DOC_RE = re.compile(r"/document/d/([a-zA-Z0-9_-]+)")
_SHEET_RE = re.compile(r"/spreadsheets/d/([a-zA-Z0-9_-]+)")
REQUIRE_GOOGLE = 1

router = Router(name="settings")

@router.callback_query(F.data == "setting_bot")
async def setting_bot_cb(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:",
        reply_markup=keyboard_setting_bot()
    )

@router.callback_query(F.data == "turn_on_off")
async def turn_cb(callback: types.CallbackQuery):
    # –ß—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    uid = callback.from_user.id
    current = state_bot(uid)
    # ‚ñ∫ –í–ö–õ–Æ–ß–ò–¢–¨
    if current == "ü§ñ‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω":
        # 1) –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if not await get_subscription_until(uid):
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ ¬´üí∞ –û–ø–ª–∞—Ç–∞¬ª.", show_alert=True)
            return

        # 2) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ª–∏ Google OAuth –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –æ–Ω
        if REQUIRE_GOOGLE and not await has_google_oauth(uid):
            url = f"{BASE_URL}/oauth/google/start?uid={callback.from_user.id}"
            await callback.message.edit_text(
                "–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google-–∞–∫–∫–∞—É–Ω—Ç:",
                reply_markup=InlineKeyboardBuilder()
            .add(InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google", url=url))
            .add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return"))
            .adjust(1,1)
            .as_markup()
    )

            await callback.answer()
            return

        # 3) –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        token, word_file = await get_user_token_and_doc(uid)
        if not token:
            await callback.message.answer(
                "–ù–µ –∑–∞–¥–∞–Ω API-—Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.\n"
                "–£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ ¬´/settings ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å API-—Ç–æ–∫–µ–Ω¬ª.",
                reply_markup=keyboard_return()
            )
            await callback.answer()
            return

        # 4) –∑–∞–ø—É—Å–∫–∞–µ–º
        await callback.answer("–ó–∞–ø—É—Å–∫–∞—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚úÖ")
        await update_user_state(uid, "active")
        await callback.message.edit_reply_markup(reply_markup=keyboard_sub(uid))
        try:
            # –Ω–µ–±–æ–ª—å—à–∞—è —É—Å—Ç—É–ø–∫–∞ —Ü–∏–∫–ª—É —Å–æ–±—ã—Ç–∏–π
            await asyncio.sleep(0)
            await run_bot(token, word_file, uid)
        except Exception as e:
            # –æ—Ç–∫–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await update_user_state(uid, "stop")
            await callback.message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}",
                reply_markup=keyboard_return()
            )

    # ‚ñ∫ –í–´–ö–õ–Æ–ß–ò–¢–¨
    elif current == "ü§ñ‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω":
        await callback.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚ùå")
        await update_user_state(uid, "stop")
        await callback.message.edit_reply_markup(reply_markup=keyboard_sub(uid))
        token, _ = await get_user_token_and_doc(uid)
        try:
            await stop_bot(str(token))
        except Exception:
            # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            pass

    # ‚ñ∫ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º –º–µ–Ω—é
    else:
        await callback.message.edit_reply_markup(
            reply_markup=keyboard_sub(uid) if await get_subscription_until(uid) else keyboard_unsub()
        )
        await callback.answer("–û–±–Ω–æ–≤–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(F.data == "prompt")
async def prompt(callback: types.CallbackQuery):
    link = await get_user_doc_id(callback.from_user.id)
    if not link:
        await callback.message.edit_text(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¢–∞–±–ª–∏—Ü—É:",
            reply_markup=keyboard_attach_source()
        )
        return

    try:
        ans = await doc(link, owner_user_id=callback.from_user.id)
        kind = ans.get("kind")
        if kind == "sheet":
            url = f"https://docs.google.com/spreadsheets/d/{ans['id']}/edit"
            src_name = "Google Sheets"
        else:
            url = f"https://docs.google.com/document/d/{ans['id']}/edit"
            src_name = "Google Docs"

        await callback.message.edit_text(
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {src_name}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ans.get('title','')}\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–µ–≤—å—é):\n{ans.get('content','')}",
            reply_markup=keyboard_prompt_controls(url)
        )
    except Exception:
        await callback.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫.\n¬´–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /settings ‚Üí ¬´üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google",
            show_alert=True
        )


@router.callback_query(F.data == "change_API")
async def change_api(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ **API-—Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞**.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ–±—ã—á–Ω–æ —Ç–∞–∫–æ–π: `1234567890:AA...`.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ *–æ—Ç–º–µ–Ω–∞*, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
        reply_markup=keyboard_return(),
        parse_mode="Markdown"
    )
    await state.set_state(Form.waiting_for_api)

@router.message(Form.waiting_for_api)
async def process_api_token(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()

    # –æ—Ç–º–µ–Ω–∞
    if text.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard_return())
        return

    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-—Ç–æ–∫–µ–Ω–∞
    # (9‚Äì11 —Ü–∏—Ñ—Ä):(35 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ A-Za-z0-9_-)
    if not re.fullmatch(r"\d{9,11}:[A-Za-z0-9_-]{35}", text):
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, —Ç–æ–∫–µ–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `1234567890:AA...`",
            reply_markup=keyboard_return(),
            parse_mode="Markdown"
        )
        return

    ok = await update_user_token(message.from_user.id, text)
    if ok:
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=keyboard_return())
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=keyboard_return())

    await state.clear()

@router.message(Form.waiting_for_api)
async def process_api(message: types.Message, state: FSMContext):
    user_api = message.text.strip()
    ok = await update_user_token(message.from_user.id, user_api)
    if ok:
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=keyboard_return())
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=keyboard_return())
    await state.clear()

@router.callback_query(F.data == "change_DOC")
async def change_doc(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID Google **–î–æ–∫—É–º–µ–Ω—Ç–∞** (Docs).",
        reply_markup=keyboard_return()
    )
    await state.set_state(Form.waiting_for_doc)

@router.message(Form.waiting_for_doc)
async def process_doc_link(message: types.Message, state: FSMContext):
    value = (message.text or "").strip()
    ok = await update_user_document(message.from_user.id, value)
    if ok:
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω.", reply_markup=keyboard_return())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.", reply_markup=keyboard_return())
    await state.clear()

@router.callback_query(F.data == "change_SHEET")
async def change_sheet(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID Google **–¢–∞–±–ª–∏—Ü—ã** (Sheets).\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä `?range=–õ–∏—Å—Ç1!A1:Z200`.",
        reply_markup=keyboard_return()
    )
    await state.set_state(Form.waiting_for_sheet)

@router.message(Form.waiting_for_sheet)
async def process_sheet_link(message: types.Message, state: FSMContext):
    value = (message.text or "").strip()
    ok = await update_user_document(message.from_user.id, value)
    if ok:
        await message.answer("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.", reply_markup=keyboard_return())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.", reply_markup=keyboard_return())
    await state.clear()

@router.callback_query(F.data == "delete_source")
async def delete_source(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–î–æ–∫—É–º–µ–Ω—Ç/–¢–∞–±–ª–∏—Ü–∞)? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard_confirm_delete_source()
    )

@router.callback_query(F.data == "confirm_delete_source")
async def confirm_delete_source(callback: types.CallbackQuery):
    # –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É
    link = await get_user_doc_id(callback.from_user.id)

    # –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    if link:
        m_doc = _DOC_RE.search(link)
        m_sheet = _SHEET_RE.search(link)
        src_id = m_doc.group(1) if m_doc else (m_sheet.group(1) if m_sheet else None)
        if src_id:
            try:
                # –Ω–∞—à–∏ –∫–ª—é—á–∏: openrouter:{doc_id}:{system_hash}:{md5(text)}
                await delete_by_pattern(f"openrouter:{src_id}:*")
            except Exception:
                pass

    # –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_document(callback.from_user.id, None)

    await callback.message.edit_text(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–≤—è–∑–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—ã–π –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞¬ª.",
        reply_markup=keyboard_setting_bot()
    )

@router.callback_query(F.data == "connect_google")
async def connect_google(callback: types.CallbackQuery):
    # –¥–∞—ë–º —Å—Å—ã–ª–∫—É —Å—Ç–∞—Ä—Ç–µ—Ä–∞
    url = f"{BASE_URL}/oauth/google/start?uid={callback.from_user.id}"
    await callback.message.edit_text(
        "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø (Docs/Sheets Read-only).\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram.",
        reply_markup=InlineKeyboardBuilder()
            .add(InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google", url=url))
            .add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return"))
            .adjust(1,1)
            .as_markup()
    )

@router.callback_query(F.data == "disconnect_google")
async def disconnect_google(callback: types.CallbackQuery):
    await delete_refresh_token(callback.from_user.id)
    await callback.answer("Google –æ—Ç–∫–ª—é—á—ë–Ω.", show_alert=False)
    await callback.message.edit_reply_markup(reply_markup=keyboard_setting_bot())

@router.callback_query(F.data == "calendar_menu")
async def calendar_menu(callback: types.CallbackQuery):
    is_linked = bool(await get_user_calendar_id(callback.from_user.id))
    await callback.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
        reply_markup=keyboard_calendar_menu(is_linked)
    )



@router.callback_query(F.data == "change_CAL")
async def change_calendar(callback: types.CallbackQuery, state: FSMContext):
    try:
        calendars = await list_calendars_oauth(callback.from_user.id)
    except Exception:
        await callback.answer(
            "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π.\n"
            "–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google (OAuth) –∏ —á—Ç–æ –≤–∫–ª—é—á—ë–Ω Calendar API.",
            show_alert=True,
        )
        return

    if not calendars:
        await callback.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # –û–±—Ä–µ–∂–µ–º –¥–æ 20 –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ FSM (id –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–¥–µ—Å—å)
    calendars = calendars[:20]
    await state.update_data(cal_list=calendars)
    await state.set_state(Form.waiting_for_calendar_pick)

    kb = InlineKeyboardBuilder()
    for i, it in enumerate(calendars):
        title = it.get("summary") or "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
        if it.get("primary"):
            title = f"‚≠ê {title}"
        # –í callback_data –∫–ª–∞–¥—ë–º —Ç–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω–¥–µ–∫—Å
        kb.add(types.InlineKeyboardButton(text=title[:32], callback_data=f"pick_cal:{i}"))
    kb.add(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return"))
    kb.adjust(1, 1, 1, 1)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("pick_cal:"), Form.waiting_for_calendar_pick)
async def pick_calendar(callback: types.CallbackQuery, state: FSMContext):
    # –î–æ—Å—Ç–∞—ë–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    try:
        idx = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    data = await state.get_data()
    cal_list = data.get("cal_list") or []
    if idx < 0 or idx >= len(cal_list):
        await callback.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    cal_id = cal_list[idx]["id"]
    try:
        await set_user_calendar_id(callback.from_user.id, cal_id)
    finally:
        await state.clear()

    await callback.answer("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=False)
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:", reply_markup=keyboard_setting_bot())

@router.callback_query(F.data == "cal_unlink")
async def cal_unlink(callback: types.CallbackQuery):
    ok = await clear_user_calendar_id(callback.from_user.id)
    if ok:
        await callback.answer("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–≤—è–∑–∞–Ω.", show_alert=False)
        # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–≤—è–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å¬ª
        await prompt(callback)
    else:
        await callback.answer("–ù–µ—á–µ–≥–æ –æ—Ç–≤—è–∑—ã–≤–∞—Ç—å ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=True)

async def _render_settings(to_msg: types.Message | types.CallbackQuery):
    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º edit_text/answer
    if isinstance(to_msg, types.CallbackQuery):
        m = to_msg.message
        await m.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:", reply_markup=keyboard_setting_bot())
    else:
        await to_msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:", reply_markup=keyboard_setting_bot())

async def _render_prompt_preview(to_msg: types.Message | types.CallbackQuery, user_id: int):
    link = await get_user_doc_id(user_id)
    if not link:
        text = "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¢–∞–±–ª–∏—Ü—É:"
        if isinstance(to_msg, types.CallbackQuery):
            await to_msg.message.edit_text(text, reply_markup=keyboard_attach_source())
        else:
            await to_msg.answer(text, reply_markup=keyboard_attach_source())
        return

    try:
        ans = await doc(link, owner_user_id=user_id)
        kind = ans.get("kind")
        if kind == "sheet":
            url = f"https://docs.google.com/spreadsheets/d/{ans['id']}/edit"
            src_name = "Google Sheets"
        else:
            url = f"https://docs.google.com/document/d/{ans['id']}/edit"
            src_name = "Google Docs"

        preview = (
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {src_name}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ans.get('title','')}\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–µ–≤—å—é):\n{ans.get('content','')}"
        )
        if isinstance(to_msg, types.CallbackQuery):
            await to_msg.message.edit_text(preview, reply_markup=keyboard_prompt_controls(url))
        else:
            await to_msg.answer(preview, reply_markup=keyboard_prompt_controls(url))

    except Exception:
        warn = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /settings ‚Üí ¬´üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google¬ª"
        if isinstance(to_msg, types.CallbackQuery):
            await to_msg.answer(warn, show_alert=True)
        else:
            await to_msg.answer(warn)

@router.message(Command("settings"))
async def settings_cmd(message: types.Message):
    await _render_settings(message)

@router.message(Command("prompt"))
async def prompt_cmd(message: types.Message):
    await _render_prompt_preview(message, message.from_user.id)