from __future__ import annotations
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram import F
import asyncio
from bot.states import Form
from keyboards import keyboard_setting_bot, keyboard_sub, state_bot, keyboard_return, keyboard_prompt_controls, keyboard_confirm_delete_source, keyboard_attach_source, keyboard_calendar_menu
from bot.services.db import update_user_state, get_user_token_and_doc, get_user_doc_id, update_user_token, update_user_document, set_user_calendar_id, get_user_calendar_id, clear_user_calendar_id
from openrouter import run_bot, stop_bot
from providers.redis_provider import delete_by_pattern
from deepseek import doc
from providers.google_calendar_oauth_provider import list_calendars_oauth
import re
from config import BASE_URL
from bot.services.google_oauth import delete_refresh_token
from aiogram.types import  InlineKeyboardButton
from aiogram.utils.keyboard import  InlineKeyboardBuilder

_DOC_RE = re.compile(r"/document/d/([a-zA-Z0-9_-]+)")
_SHEET_RE = re.compile(r"/spreadsheets/d/([a-zA-Z0-9_-]+)")


router = Router(name="settings")

@router.callback_query(F.data == "setting_bot")
async def setting_bot_cb(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:",
        reply_markup=keyboard_setting_bot()
    )

@router.callback_query(F.data == "turn_on_off")
async def turn_cb(callback: types.CallbackQuery):
    # –ß—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    res = state_bot(callback.from_user.id)

    if res == "ü§ñ‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω":
        await callback.answer(text="–ó–∞–ø—É—Å–∫–∞—é –í–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚úÖ")
        # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º event loop
        await asyncio.sleep(1)
        await update_user_state(callback.from_user.id, "active")
        await callback.message.edit_reply_markup(reply_markup=keyboard_sub(callback.from_user.id))
        token, word_file = await get_user_token_and_doc(callback.from_user.id)
        await run_bot(token, word_file, callback.from_user.id)

    elif res == "ü§ñ‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω":
        await callback.answer(text="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –í–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚ùå")
        await update_user_state(callback.from_user.id, "stop")
        await callback.message.edit_reply_markup(reply_markup=keyboard_sub(callback.from_user.id))
        token, _ = await get_user_token_and_doc(callback.from_user.id)
        await stop_bot(str(token))

@router.callback_query(F.data == "check_txt")
async def check_txt(callback: types.CallbackQuery):
    link = await get_user_doc_id(callback.from_user.id)
    if not link:
        await callback.message.edit_text(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¢–∞–±–ª–∏—Ü—É:",
            reply_markup=keyboard_attach_source()
        )
        return

    try:
        ans = await doc(link, owner_user_id=callback.from_user.id)
        kind = ans.get("kind")
        if kind == "sheet":
            url = f"https://docs.google.com/spreadsheets/d/{ans['id']}/edit"
            src_name = "Google Sheets"
        else:
            url = f"https://docs.google.com/document/d/{ans['id']}/edit"
            src_name = "Google Docs"

        await callback.message.edit_text(
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {src_name}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ans.get('title','')}\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–µ–≤—å—é):\n{ans.get('content','')}",
            reply_markup=keyboard_prompt_controls(url)
        )
    except Exception:
        await callback.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø (OAuth/—à–∞—Ä–∏–Ω–≥) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.",
            show_alert=True
        )

@router.message(Form.waiting_for_api)
async def process_api(message: types.Message, state: FSMContext):
    user_api = message.text.strip()
    ok = await update_user_token(message.from_user.id, user_api)
    if ok:
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=keyboard_return())
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=keyboard_return())
    await state.clear()

@router.callback_query(F.data == "change_DOC")
async def change_doc(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID Google **–î–æ–∫—É–º–µ–Ω—Ç–∞** (Docs).",
        reply_markup=keyboard_return()
    )
    await state.set_state(Form.waiting_for_doc)

@router.message(Form.waiting_for_doc)
async def process_doc_link(message: types.Message, state: FSMContext):
    value = (message.text or "").strip()
    ok = await update_user_document(message.from_user.id, value)
    if ok:
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω.", reply_markup=keyboard_return())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.", reply_markup=keyboard_return())
    await state.clear()

@router.callback_query(F.data == "change_SHEET")
async def change_sheet(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID Google **–¢–∞–±–ª–∏—Ü—ã** (Sheets).\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä `?range=–õ–∏—Å—Ç1!A1:Z200`.",
        reply_markup=keyboard_return()
    )
    await state.set_state(Form.waiting_for_sheet)

@router.message(Form.waiting_for_sheet)
async def process_sheet_link(message: types.Message, state: FSMContext):
    value = (message.text or "").strip()
    ok = await update_user_document(message.from_user.id, value)
    if ok:
        await message.answer("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.", reply_markup=keyboard_return())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.", reply_markup=keyboard_return())
    await state.clear()

@router.callback_query(F.data == "delete_source")
async def delete_source(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–î–æ–∫—É–º–µ–Ω—Ç/–¢–∞–±–ª–∏—Ü–∞)? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard_confirm_delete_source()
    )

@router.callback_query(F.data == "confirm_delete_source")
async def confirm_delete_source(callback: types.CallbackQuery):
    # –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É
    link = await get_user_doc_id(callback.from_user.id)

    # –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    if link:
        m_doc = _DOC_RE.search(link)
        m_sheet = _SHEET_RE.search(link)
        src_id = m_doc.group(1) if m_doc else (m_sheet.group(1) if m_sheet else None)
        if src_id:
            try:
                # –Ω–∞—à–∏ –∫–ª—é—á–∏: openrouter:{doc_id}:{system_hash}:{md5(text)}
                await delete_by_pattern(f"openrouter:{src_id}:*")
            except Exception:
                pass

    # –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_document(callback.from_user.id, None)

    await callback.message.edit_text(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–≤—è–∑–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—ã–π –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞¬ª.",
        reply_markup=keyboard_setting_bot()
    )

@router.callback_query(F.data == "connect_google")
async def connect_google(callback: types.CallbackQuery):
    # –¥–∞—ë–º —Å—Å—ã–ª–∫—É —Å—Ç–∞—Ä—Ç–µ—Ä–∞
    url = f"{BASE_URL}/oauth/google/start?uid={callback.from_user.id}"
    await callback.message.edit_text(
        "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø (Docs/Sheets Read-only).\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram.",
        reply_markup=InlineKeyboardBuilder()
            .add(InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google", url=url))
            .add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return"))
            .adjust(1,1)
            .as_markup()
    )

@router.callback_query(F.data == "disconnect_google")
async def disconnect_google(callback: types.CallbackQuery):
    await delete_refresh_token(callback.from_user.id)
    await callback.answer("Google –æ—Ç–∫–ª—é—á—ë–Ω.", show_alert=False)
    await callback.message.edit_reply_markup(reply_markup=keyboard_setting_bot())

@router.callback_query(F.data == "calendar_menu")
async def calendar_menu(callback: types.CallbackQuery):
    is_linked = bool(await get_user_calendar_id(callback.from_user.id))
    await callback.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
        reply_markup=keyboard_calendar_menu(is_linked)
    )



@router.callback_query(F.data == "change_CAL")
async def change_calendar(callback: types.CallbackQuery, state: FSMContext):
    try:
        calendars = await list_calendars_oauth(callback.from_user.id)
    except Exception:
        await callback.answer(
            "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π.\n"
            "–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google (OAuth) –∏ —á—Ç–æ –≤–∫–ª—é—á—ë–Ω Calendar API.",
            show_alert=True,
        )
        return

    if not calendars:
        await callback.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # –û–±—Ä–µ–∂–µ–º –¥–æ 20 –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ FSM (id –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–¥–µ—Å—å)
    calendars = calendars[:20]
    await state.update_data(cal_list=calendars)
    await state.set_state(Form.waiting_for_calendar_pick)

    kb = InlineKeyboardBuilder()
    for i, it in enumerate(calendars):
        title = it.get("summary") or "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
        if it.get("primary"):
            title = f"‚≠ê {title}"
        # –í callback_data –∫–ª–∞–¥—ë–º —Ç–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω–¥–µ–∫—Å
        kb.add(types.InlineKeyboardButton(text=title[:32], callback_data=f"pick_cal:{i}"))
    kb.add(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return"))
    kb.adjust(1, 1, 1, 1)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("pick_cal:"), Form.waiting_for_calendar_pick)
async def pick_calendar(callback: types.CallbackQuery, state: FSMContext):
    # –î–æ—Å—Ç–∞—ë–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    try:
        idx = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    data = await state.get_data()
    cal_list = data.get("cal_list") or []
    if idx < 0 or idx >= len(cal_list):
        await callback.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    cal_id = cal_list[idx]["id"]
    try:
        await set_user_calendar_id(callback.from_user.id, cal_id)
    finally:
        await state.clear()

    await callback.answer("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=False)
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:", reply_markup=keyboard_setting_bot())

@router.callback_query(F.data == "cal_unlink")
async def cal_unlink(callback: types.CallbackQuery):
    ok = await clear_user_calendar_id(callback.from_user.id)
    if ok:
        await callback.answer("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–≤—è–∑–∞–Ω.", show_alert=False)
        # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–≤—è–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å¬ª
        await check_txt(callback)
    else:
        await callback.answer("–ù–µ—á–µ–≥–æ –æ—Ç–≤—è–∑—ã–≤–∞—Ç—å ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=True)