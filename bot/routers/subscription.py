from __future__ import annotations
from aiogram import Router, types
from aiogram import F
from aiogram.fsm.context import FSMContext
from datetime import datetime, timezone
from zoneinfo import ZoneInfo
from keyboards import keyboard_sub, keyboard_subscribe, keyboard_change_ai
from bot.services.db import get_subscription_until

TZ_MOSCOW = ZoneInfo("Europe/Moscow")

router = Router(name="subscription")

def format_sub_until(raw) -> str:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç ISO-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ datetime –∏ –æ—Ç–¥–∞—ë—Ç '09:15:49 ‚åõÔ∏è 04.11.2025'."""
    if raw is None:
        return ""
    if isinstance(raw, datetime):
        dt = raw
    else:
        s = str(raw).strip()
        try:
            dt = datetime.fromisoformat(s.replace("Z", "+00:00"))
        except Exception:
            for fmt in ("%Y-%m-%d %H:%M:%S", "%d.%m.%Y %H:%M:%S"):
                try:
                    dt = datetime.strptime(s, fmt)
                    break
                except Exception:
                    pass
            else:
                # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å
                return s
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    local = dt.astimezone(TZ_MOSCOW)
    return f"{local:%H:%M:%S} ‚åõÔ∏è {local:%d.%m.%Y}"

# "‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞" (reply-–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def check_sub_message(message: types.Message):
    sub_until = await get_subscription_until(message.from_user.id)  
    if sub_until:
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {format_sub_until(sub_until)}")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

# "üí∞ –û–ø–ª–∞—Ç–∞" (reply-–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "üí∞ –û–ø–ª–∞—Ç–∞")
async def mes_payment(message: types.Message):
    res = await get_subscription_until(message.from_user.id)
    if res:
        # –ü—Ä–æ—Å—Ç–æ —à–ª—ë–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –±–µ–∑ chat_id/message_id, aiogram v3 —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard_sub(message.from_user.id))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=keyboard_subscribe())
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ò–ò-–ê–≥–µ–Ω—Ç–∞\n–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:",
            reply_markup=keyboard_change_ai()
        )


@router.callback_query(F.data == "check_sub")
async def check_sub_callback(callback: types.CallbackQuery):
    res = await get_subscription_until(callback.from_user.id)
    if res:
        await callback.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {format_sub_until(res)}")
    else:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")