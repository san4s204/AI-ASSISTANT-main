# bot/services/subscription.py
from __future__ import annotations
import asyncio
import logging
from datetime import datetime, timezone

from aiogram import Bot
from bot.services.db import (
    find_users_to_expire,
    mark_subscriptions_expired,
    get_user_token_and_doc,
)
from openrouter import stop_bot  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤

CHECK_INTERVAL_SEC = 60 * 30  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω; –º–æ–∂–Ω–æ 5‚Äì10 –º–∏–Ω

async def subscription_expirer(bot: Bot, interval: int = CHECK_INTERVAL_SEC):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ—Ç –∏—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ,
    –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Ö "–¥–æ—á–µ—Ä–Ω–∏–µ" –±–æ—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    while True:
        try:
            now = datetime.now()  # –æ—Å—Ç–∞–≤–∏–º naive, —á—Ç–æ–±—ã —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º date_end
            to_expire = await find_users_to_expire(now)
            if to_expire:
                user_ids = [uid for uid, _ in to_expire]
                # 1) –ø–æ–º–µ—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–º–∏
                await mark_subscriptions_expired(user_ids)

                # 2) –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö
                for uid, state in to_expire:
                    if state == "active":
                        token, _ = await get_user_token_and_doc(uid)
                        if token:
                            try:
                                await stop_bot(str(token))
                            except Exception:
                                logging.exception("stop_bot failed for %s", uid)

                # 3) —É–≤–µ–¥–æ–º–∏—Ç—å
                for uid, _ in to_expire:
                    try:
                        await bot.send_message(
                            uid,
                            "‚õîÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                            "–ù–∞–∂–º–∏—Ç–µ ¬´üí∞ –û–ø–ª–∞—Ç–∞¬ª –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å.",
                        )
                    except Exception:
                        # –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –¥–æ—Å—Ç–∞–≤–∏—Ç—å
                        pass

        except Exception:
            logging.exception("subscription_expirer loop failed")

        await asyncio.sleep(interval)
